// Generated by CoffeeScript 1.7.0
(function() {
  var Base, Init, W, ejs, exec, fs, ncp, nodefn, path, prompt, readdirp,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  path = require('path');

  fs = require('fs');

  W = require('when');

  nodefn = require('when/node/function');

  readdirp = require('readdirp');

  ncp = require('ncp').ncp;

  exec = require('child_process').exec;

  ejs = require('ejs');

  prompt = require('prompt');

  Base = require('../base');

  Init = (function(_super) {
    var configure_options, copy_template, get_user_config, prompt_for_info, replace_ejs, update_template, user_after_fn, user_before_fn;

    __extends(Init, _super);

    function Init() {
      Init.__super__.constructor.apply(this, arguments);
    }

    Init.prototype.execute = function(opts) {
      return configure_options.call(this, opts).then(get_user_config.bind(this)).then(user_before_fn.bind(this)).then(prompt_for_info.bind(this)).then(update_template.bind(this)).then(copy_template.bind(this)).then(replace_ejs.bind(this)).then(user_after_fn.bind(this))["yield"]("project created at ./" + this.target + "!");
    };

    Init.prototype.remove = function(f) {
      return fs.unlinkSync(path.resolve(this.target, f));
    };

    configure_options = function(opts) {
      if (!opts) {
        return W.reject('please provide a template name');
      }
      this.template = opts.template;
      this.target = opts.path;
      this.options = opts.options;
      if (!this.template) {
        return W.reject('please provide a template name');
      }
      if (!this.target) {
        this.target = path.join(process.cwd(), this.template);
      }
      this.sprout_path = this.path(this.template);
      if (!fs.existsSync(this.sprout_path)) {
        return W.reject("template " + this.template + " does not exist");
      }
      return W.resolve();
    };

    get_user_config = function() {
      var init_file;
      init_file = path.join(this.sprout_path, 'init.coffee');
      if (!fs.existsSync(init_file)) {
        return this.config = {};
      }
      return this.config = require(init_file);
    };

    user_before_fn = function() {
      if (!this.config.before) {
        return W.resolve();
      }
      return nodefn.call(this.config.before, this);
    };

    prompt_for_info = function() {
      if (!this.config.configure) {
        this.config_values = this.options;
        return W.resolve();
      }
      prompt.override = this.options;
      prompt.message = '';
      prompt.delimiter = '';
      if (!prompt.override) {
        console.log('\nplease enter the following information:'.yellow);
      }
      prompt.start();
      return nodefn.call(prompt.get, this.config.configure).tap((function(_this) {
        return function(res) {
          _this.config_values = res;
          if (!prompt.override) {
            return console.log('');
          }
        };
      })(this));
    };

    user_after_fn = function() {
      if (!this.config.after) {
        return W.resolve();
      }
      return nodefn.call(this.config.after, this);
    };

    update_template = function() {
      return nodefn.call(exec, "cd " + this.sprout_path + "; git pull");
    };

    copy_template = function() {
      return nodefn.call(ncp, path.join(this.sprout_path, 'root'), this.target);
    };

    replace_ejs = function() {
      return nodefn.call(readdirp, {
        root: this.target
      }).tap((function(_this) {
        return function(res) {
          return res.files.map(function(f) {
            var processed;
            processed = ejs.render(fs.readFileSync(f.fullPath, 'utf8'), _this.config_values);
            return fs.writeFileSync(f.fullPath, processed);
          });
        };
      })(this));
    };

    return Init;

  })(Base);

  module.exports = function(opts) {
    return (new Init()).execute(opts);
  };

}).call(this);
