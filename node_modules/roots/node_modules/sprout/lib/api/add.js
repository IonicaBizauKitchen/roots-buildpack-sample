// Generated by CoffeeScript 1.7.0
(function() {
  var Add, Base, W, exec, nodefn, which,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  which = require('which');

  W = require('when');

  nodefn = require('when/node/function');

  exec = require('child_process').exec;

  Base = require('../base');

  Add = (function(_super) {
    var configure_options, link_project;

    __extends(Add, _super);

    function Add() {
      Add.__super__.constructor.apply(this, arguments);
    }

    Add.prototype.execute = function(opts) {
      return configure_options.call(this, opts).then(link_project.bind(this)).then((function(_this) {
        return function() {
          if (_this.branch) {
            return nodefn.call(exec, "cd " + (_this.path(_this.name)) + "; git checkout " + _this.branch);
          }
        };
      })(this))["yield"]("template '" + this.name + "' added");
    };

    configure_options = function(opts) {
      var branch_matcher;
      if (!opts) {
        return W.reject('your template needs a name!');
      }
      this.name = opts.name;
      this.url = opts.url;
      this.options = opts.options || {};
      if (!this.name) {
        return W.reject('your template needs a name!');
      }
      if (!which.sync('git')) {
        return W.reject('you need to have git installed');
      }
      if (this.name && !this.url) {
        this.url = this.name;
        this.name = this.url.split('/')[this.url.split('/').length - 1];
      }
      this.branch = null;
      branch_matcher = /#(.*)$/;
      if (this.url.match(branch_matcher)) {
        this.branch = "" + (this.url.match(branch_matcher)[1]);
        this.url = this.url.replace(branch_matcher, '');
      }
      return W.resolve();
    };

    link_project = function() {
      if (!this.options.local) {
        return nodefn.call(exec, "git clone " + this.url + " " + (this.path(this.name)));
      } else {
        return nodefn.call(exec, "rm -rf " + (this.path(this.name)) + "; ln -s " + this.url + " " + (this.path(this.name)));
      }
    };

    return Add;

  })(Base);

  module.exports = function(opts) {
    return (new Add()).execute(opts);
  };

}).call(this);
